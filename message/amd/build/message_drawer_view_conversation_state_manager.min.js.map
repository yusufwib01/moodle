{"version":3,"file":"message_drawer_view_conversation_state_manager.min.js","sources":["../src/message_drawer_view_conversation_state_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module operates on the view states from the message_drawer_view_conversation module.\n * It exposes functions that can be used to generate new version of the state.\n *\n * Important notes for this module:\n * 1.) The existing state is always immutable. It should never be modified.\n * 2.) All functions that operate on the state should always clone the state and\n *     modify the cloned state before returning it.\n *\n * It's important that the states remain immutable because they are diff'd in\n * the message_drawer_view_conversation_patcher module in order to work out what\n * has changed.\n *\n * @module     core_message/message_drawer_view_conversation_state_manager\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Clone a state, a state is a collection of information about the variables required to build\n     * the conversation user interface.\n     *\n     * @param  {Object} state State to clone\n     * @return {Object} newstate A copy of the state to clone.\n     */\n    var cloneState = function(state) {\n        // Do a deep extend to make sure we recursively copy objects and\n        // arrays so that the new state doesn't contain any references to\n        // the old state, e.g. adding a value to an array in the new state\n        // shouldn't also add it to the old state.\n        return $.extend(true, {}, state);\n    };\n\n    /**\n     * Format messages to be used in a state.\n     *\n     * @param  {Array} messages The messages to format.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Array} members The converstation members.\n     * @return {Array} Formatted messages.\n     */\n    var formatMessages = function(messages, loggedInUserId, members) {\n        return messages.map(function(message) {\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\n            return {\n                // Stringify the id.\n                id: \"\" + message.id,\n                fromLoggedInUser: fromLoggedInUser,\n                userFrom: members[message.useridfrom],\n                text: message.text,\n                timeCreated: message.timecreated ? parseInt(message.timecreated, 10) : null\n            };\n        });\n    };\n\n    /**\n     * Format members to be used in a state.\n     *\n     * @param  {Array} members The messages to format.\n     * @return {Array} Formatted members.\n     */\n    var formatMembers = function(members) {\n        return members.map(function(member) {\n            return {\n                id: member.id,\n                fullname: member.fullname,\n                profileurl: member.profileurl,\n                profileimageurl: member.profileimageurl,\n                profileimageurlsmall: member.profileimageurlsmall,\n                isonline:  member.isonline,\n                showonlinestatus: member.showonlinestatus,\n                isblocked: member.isblocked,\n                iscontact: member.iscontact,\n                isdeleted: member.isdeleted,\n                canmessage: member.canmessage,\n                canmessageevenifblocked: member.canmessageevenifblocked,\n                requirescontact: member.requirescontact,\n                contactrequests: member.contactrequests || [],\n                cancreatecontact: member.cancreatecontact,\n            };\n        });\n    };\n\n    /**\n     * Create an initial (blank) state.\n     *\n     * @param  {Number} midnight Midnight time.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Number} id The conversation id.\n     * @param  {Number} messagePollMin The message poll start timeout in seconds.\n     * @param  {Number} messagePollMax The message poll max timeout limit in seconds.\n     * @param  {Number} messagePollAfterMax The message poll frequency in seconds to reset to after max limit is reached.\n     * @return {Object} Initial state.\n     */\n    var buildInitialState = function(\n        midnight,\n        loggedInUserId,\n        id,\n        messagePollMin,\n        messagePollMax,\n        messagePollAfterMax\n    ) {\n        return {\n            midnight: midnight,\n            loggedInUserId: loggedInUserId,\n            id: id,\n            messagePollMin: messagePollMin,\n            messagePollMax: messagePollMax,\n            messagePollAfterMax: messagePollAfterMax,\n            name: null,\n            subname: null,\n            type: null,\n            totalMemberCount: null,\n            imageUrl: null,\n            isFavourite: null,\n            isMuted: null,\n            canDeleteMessagesForAllUsers: false,\n            deleteMessagesForAllUsers: false,\n            members: {},\n            messages: [],\n            hasTriedToLoadMessages: false,\n            loadingMessages: true,\n            loadingMembers: true,\n            loadingConfirmAction: false,\n            pendingBlockUserIds: [],\n            pendingUnblockUserIds: [],\n            pendingRemoveContactIds: [],\n            pendingAddContactIds: [],\n            pendingDeleteMessageIds: [],\n            pendingSendMessageIds: [],\n            pendingDeleteConversation: false,\n            selectedMessageIds: [],\n            showEmojiAutoComplete: false,\n            showEmojiPicker: false,\n            canSendMessageToConversation: true,\n        };\n    };\n\n    /**\n     * Add messages to a state and sort them by timecreated.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to add to state.\n     * @return {Object} state New state with added messages.\n     */\n    var addMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\n        formattedMessages = formattedMessages.map(function(message) {\n            message.sendState = null;\n            message.timeAdded = Date.now();\n            message.errorMessage = null;\n            return message;\n        });\n        var allMessages = state.messages.concat(formattedMessages);\n        // Sort the messages. Oldest to newest.\n        allMessages.sort(function(a, b) {\n            if (a.timeCreated === null && b.timeCreated === null) {\n                if (a.timeAdded < b.timeAdded) {\n                    return -1;\n                } else if (a.timeAdded > b.timeAdded) {\n                    return 1;\n                }\n            }\n\n            if (a.timeCreated === null && b.timeCreated !== null) {\n                // A comes after b.\n                return 1;\n            } else if (a.timeCreated !== null && b.timeCreated === null) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated < b.timeCreated) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated > b.timeCreated) {\n                // A comes after b.\n                return 1;\n            } else if (a.id < b.id) {\n                return -1;\n            } else if (a.id > b.id) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Filter out any duplicate messages.\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\n            return !index || message.id != sortedMessages[index - 1].id;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Update existing messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} data 2D array of old and new messages\n     * @return {Object} state.\n     */\n    var updateMessages = function(state, data) {\n        var newState = cloneState(state);\n        var updatesById = data.reduce(function(carry, messageData) {\n            var oldMessage = messageData[0];\n            var newMessage = messageData[1];\n            var formattedMessages = formatMessages([newMessage], state.loggedInUserId, state.members);\n            var formattedMessage = formattedMessages[0];\n\n            carry[oldMessage.id] = formattedMessage;\n            return carry;\n        }, {});\n\n        newState.messages = newState.messages.map(function(message) {\n            if (message.id in updatesById) {\n                return $.extend(message, updatesById[message.id]);\n            } else {\n                return message;\n            }\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var removeMessageIds = messages.map(function(message) {\n            return \"\" + message.id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return removeMessageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state by message id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return messageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Add conversation member to state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Conversation members to be added to state.\n     * @return {Object} New state with added members.\n     */\n    var addMembers = function(state, members) {\n        var newState = cloneState(state);\n        var formattedMembers = formatMembers(members);\n        formattedMembers.forEach(function(member) {\n            newState.members[member.id] = member;\n        });\n        return newState;\n    };\n\n    /**\n     * Remove members from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Members to be removed from state.\n     * @return {Object} New state with removed members.\n     */\n    var removeMembers = function(state, members) {\n        var newState = cloneState(state);\n        members.forEach(function(member) {\n            delete newState.members[member.id];\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state loading messages attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading messages value.\n     * @return {Object} New state with loading messages attribute.\n     */\n    var setLoadingMessages = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMessages = value;\n        if (state.loadingMessages && !value) {\n            // If we're going from loading to not loading then\n            // it means we've tried to load.\n            newState.hasTriedToLoadMessages = true;\n        }\n        return newState;\n    };\n\n    /**\n     * Set the state loading members attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading members value.\n     * @return {Object} New state with loading members attribute.\n     */\n    var setLoadingMembers = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMembers = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value The ID.\n     * @return {Object} New state.\n     */\n    var setId = function(state, value) {\n        var newState = cloneState(state);\n        newState.id = value;\n        return newState;\n    };\n\n    /**\n     * Set the state name attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New name value.\n     * @return {Object} New state with name attribute.\n     */\n    var setName = function(state, value) {\n        var newState = cloneState(state);\n        newState.name = value;\n        return newState;\n    };\n\n    /**\n     * Set the state subname attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New subname value.\n     * @return {Object} New state.\n     */\n    var setSubname = function(state, value) {\n        var newState = cloneState(state);\n        newState.subname = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation type.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Int} type Conversation type.\n     * @return {Object} New state.\n     */\n    var setType = function(state, type) {\n        var newState = cloneState(state);\n        newState.type = type;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a favourite conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} isFavourite If it's a favourite.\n     * @return {Object} New state.\n     */\n    var setIsFavourite = function(state, isFavourite) {\n        var newState = cloneState(state);\n        newState.isFavourite = isFavourite;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a muted conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {bool} isMuted If it's muted.\n     * @return {Object} New state.\n     */\n    var setIsMuted = function(state, isMuted) {\n        var newState = cloneState(state);\n        newState.isMuted = isMuted;\n        return newState;\n    };\n\n    /**\n     * Set the total member count.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} count The count.\n     * @return {Object} New state.\n     */\n    var setTotalMemberCount = function(state, count) {\n        var newState = cloneState(state);\n        newState.totalMemberCount = count;\n        return newState;\n    };\n\n    /**\n     * Set the conversation image url.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} url The url to the image.\n     * @return {Object} New state.\n     */\n    var setImageUrl = function(state, url) {\n        var newState = cloneState(state);\n        newState.imageUrl = url;\n        return newState;\n    };\n\n    /**\n     * Set the state loading confirm action attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading confirm action value.\n     * @return {Object} New state with loading confirm action attribute.\n     */\n    var setLoadingConfirmAction = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingConfirmAction = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete conversation attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New pending delete conversation value.\n     * @return {Object} New state with pending delete conversation attribute.\n     */\n    var setPendingDeleteConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.pendingDeleteConversation = value;\n        return newState;\n    };\n\n    /**\n     * Set the state of message to pending.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendPendingById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'pending';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of message to sent.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendSuccessById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'sent';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of messages to error.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @param  {string} errorMessage\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendFailById = function(state, messageIds, errorMessage) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'error';\n                message.errorMessage = errorMessage;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the visibility of the emoji picker.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} show Should the emoji picker be shown.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setShowEmojiPicker = function(state, show) {\n        var newState = cloneState(state);\n        newState.showEmojiPicker = show;\n        return newState;\n    };\n\n    /**\n     * Set whether emojis auto complete suggestions should be shown.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} show Show the autocomplete\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setShowEmojiAutoComplete = function(state, show) {\n        var newState = cloneState(state);\n        newState.showEmojiAutoComplete = show;\n        return newState;\n    };\n\n    /**\n     * Set the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var addPendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingBlockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var addPendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingRemoveContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var addPendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingUnblockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending add users to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to add users to contacts.\n     * @return {Object} New state with array of pending add users to contacts userids.\n     */\n    var addPendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingAddContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var addPendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds.forEach(function(id) {\n            newState.pendingDeleteMessageIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var removePendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var removePendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var removePendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending add to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\n     * @return {Object} New state with array of pending add to contacts userids.\n     */\n    var removePendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending delete messages userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\n     * @return {Object} New state with array of messages to delete.\n     */\n    var removePendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Add messages to state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages that are selected.\n     * @return {Object} New state with array of not blocked members.\n     */\n    var addSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\n        return newState;\n    };\n\n    /**\n     * Remove messages from the state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to remove from selected messages.\n     * @return {Object} New state with array of selected messages.\n     */\n    var removeSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Mark messages as read.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} readMessages Messages that are read.\n     * @return {Object} New state with array of messages that have the isread attribute set.\n     */\n    var markMessagesAsRead = function(state, readMessages) {\n        var newState = cloneState(state);\n        var readMessageIds = readMessages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.map(function(message) {\n            if (readMessageIds.indexOf(message.id) >= 0) {\n                message.isRead = true;\n            }\n\n            return message;\n        });\n        return newState;\n    };\n\n    /**\n     * Add a contact request to each of the members that the request is for.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var addContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n            newState.members[fromUserId].contactrequests.push(request);\n            newState.members[toUserId].contactrequests.push(request);\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove a contact request from the members of that request.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var removeContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\n                return existing.userid != fromUserId;\n            });\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\n                return existing.requesteduserid != toUserId;\n            });\n        });\n\n        return newState;\n    };\n\n    /**\n     * Set wheter the message of the conversation can delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value If it can delete for all users.\n     * @return {Object} New state.\n     */\n    var setCanDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.canDeleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    /**\n     * Set wheter the messages of the conversation delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value Delete messages for all users.\n     * @return {Object} New state.\n     */\n    var setDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.deleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    /**\n     * Set whether the user can send messages to the conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value If it can send message to conversation.\n     * @return {Object} New state.\n     */\n    var setCanSendMessageToConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.canSendMessageToConversation = value;\n        return newState;\n    };\n\n    return {\n        buildInitialState: buildInitialState,\n        addMessages: addMessages,\n        updateMessages: updateMessages,\n        removeMessages: removeMessages,\n        removeMessagesById: removeMessagesById,\n        addMembers: addMembers,\n        removeMembers: removeMembers,\n        setLoadingMessages: setLoadingMessages,\n        setLoadingMembers: setLoadingMembers,\n        setId: setId,\n        setName: setName,\n        setSubname: setSubname,\n        setType: setType,\n        setIsFavourite: setIsFavourite,\n        setIsMuted: setIsMuted,\n        setCanDeleteMessagesForAllUsers: setCanDeleteMessagesForAllUsers,\n        setDeleteMessagesForAllUsers: setDeleteMessagesForAllUsers,\n        setTotalMemberCount: setTotalMemberCount,\n        setImageUrl: setImageUrl,\n        setLoadingConfirmAction: setLoadingConfirmAction,\n        setPendingDeleteConversation: setPendingDeleteConversation,\n        setMessagesSendPendingById: setMessagesSendPendingById,\n        setMessagesSendSuccessById: setMessagesSendSuccessById,\n        setMessagesSendFailById: setMessagesSendFailById,\n        setShowEmojiAutoComplete: setShowEmojiAutoComplete,\n        setShowEmojiPicker: setShowEmojiPicker,\n        addPendingBlockUsersById: addPendingBlockUsersById,\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\n        addPendingAddContactsById: addPendingAddContactsById,\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\n        removePendingBlockUsersById: removePendingBlockUsersById,\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\n        removePendingAddContactsById: removePendingAddContactsById,\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\n        addSelectedMessagesById: addSelectedMessagesById,\n        removeSelectedMessagesById: removeSelectedMessagesById,\n        markMessagesAsRead: markMessagesAsRead,\n        addContactRequests: addContactRequests,\n        removeContactRequests: removeContactRequests,\n        setCanSendMessageToConversation: setCanSendMessageToConversation,\n    };\n});\n"],"names":["define","$","cloneState","state","extend","formatMessages","messages","loggedInUserId","members","map","message","fromLoggedInUser","useridfrom","id","userFrom","text","timeCreated","timecreated","parseInt","buildInitialState","midnight","messagePollMin","messagePollMax","messagePollAfterMax","name","subname","type","totalMemberCount","imageUrl","isFavourite","isMuted","canDeleteMessagesForAllUsers","deleteMessagesForAllUsers","hasTriedToLoadMessages","loadingMessages","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingSendMessageIds","pendingDeleteConversation","selectedMessageIds","showEmojiAutoComplete","showEmojiPicker","canSendMessageToConversation","addMessages","newState","formattedMessages","sendState","timeAdded","Date","now","errorMessage","allMessages","concat","sort","a","b","filter","index","sortedMessages","updateMessages","data","updatesById","reduce","carry","messageData","oldMessage","newMessage","formattedMessage","removeMessages","removeMessageIds","indexOf","removeMessagesById","messageIds","addMembers","formattedMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","canmessageevenifblocked","requirescontact","contactrequests","cancreatecontact","formatMembers","forEach","removeMembers","setLoadingMessages","value","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setIsMuted","setCanDeleteMessagesForAllUsers","setDeleteMessagesForAllUsers","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","setMessagesSendPendingById","setMessagesSendSuccessById","setMessagesSendFailById","setShowEmojiAutoComplete","show","setShowEmojiPicker","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","isRead","addContactRequests","requests","request","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing","setCanSendMessageToConversation"],"mappings":"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"}